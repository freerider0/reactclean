{"mappings":"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","sources":["packages/@react-aria/collections/src/BaseCollection.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection as ICollection, Key, Node} from '@react-types/shared';\nimport {ReactElement, ReactNode} from 'react';\n\nexport type Mutable<T> = {\n  -readonly[P in keyof T]: T[P]\n}\n\ntype FilterFn<T> = (textValue: string, node: Node<T>) => boolean;\n\n/** An immutable object representing a Node in a Collection. */\nexport class CollectionNode<T> implements Node<T> {\n  static readonly type: string;\n  readonly type: string;\n  readonly key: Key;\n  readonly value: T | null = null;\n  readonly level: number = 0;\n  readonly hasChildNodes: boolean = false;\n  readonly rendered: ReactNode = null;\n  readonly textValue: string = '';\n  readonly 'aria-label'?: string = undefined;\n  readonly index: number = 0;\n  readonly parentKey: Key | null = null;\n  readonly prevKey: Key | null = null;\n  readonly nextKey: Key | null = null;\n  readonly firstChildKey: Key | null = null;\n  readonly lastChildKey: Key | null = null;\n  readonly props: any = {};\n  readonly render?: (node: Node<any>) => ReactElement;\n  readonly colSpan: number | null = null;\n  readonly colIndex: number | null = null;\n\n  constructor(key: Key) {\n    this.type = (this.constructor as typeof CollectionNode).type;\n    this.key = key;\n  }\n\n  get childNodes(): Iterable<Node<T>> {\n    throw new Error('childNodes is not supported');\n  }\n\n  clone(): this {\n    let node: Mutable<this> = new (this.constructor as any)(this.key);\n    node.value = this.value;\n    node.level = this.level;\n    node.hasChildNodes = this.hasChildNodes;\n    node.rendered = this.rendered;\n    node.textValue = this.textValue;\n    node['aria-label'] = this['aria-label'];\n    node.index = this.index;\n    node.parentKey = this.parentKey;\n    node.prevKey = this.prevKey;\n    node.nextKey = this.nextKey;\n    node.firstChildKey = this.firstChildKey;\n    node.lastChildKey = this.lastChildKey;\n    node.props = this.props;\n    node.render = this.render;\n    node.colSpan = this.colSpan;\n    node.colIndex = this.colIndex;\n    return node;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  filter(collection: BaseCollection<T>, newCollection: BaseCollection<T>, filterFn: FilterFn<T>): CollectionNode<T> | null {\n    let clone = this.clone();\n    newCollection.addDescendants(clone, collection);\n    return clone;\n  }\n}\n\nexport class FilterableNode<T> extends CollectionNode<T> {\n  filter(collection: BaseCollection<T>, newCollection: BaseCollection<T>, filterFn: FilterFn<T>): CollectionNode<T> | null {\n    let [firstKey, lastKey] = filterChildren(collection, newCollection, this.firstChildKey, filterFn);\n    let newNode: Mutable<CollectionNode<T>> = this.clone();\n    newNode.firstChildKey = firstKey;\n    newNode.lastChildKey = lastKey;\n    return newNode;\n  }\n}\n\nexport class HeaderNode extends CollectionNode<unknown> {\n  static readonly type = 'header';\n}\n\nexport class LoaderNode extends CollectionNode<unknown> {\n  static readonly type = 'loader';\n}\n\nexport class ItemNode<T> extends FilterableNode<T> {\n  static readonly type = 'item';\n\n  filter(collection: BaseCollection<T>, newCollection: BaseCollection<T>, filterFn: FilterFn<T>): ItemNode<T> | null {\n    if (filterFn(this.textValue, this)) {\n      let clone = this.clone();\n      newCollection.addDescendants(clone, collection);\n      return clone;\n    }\n\n    return null;\n  }\n}\n\nexport class SectionNode<T> extends FilterableNode<T> {\n  static readonly type = 'section';\n\n  filter(collection: BaseCollection<T>, newCollection: BaseCollection<T>, filterFn: FilterFn<T>): SectionNode<T> | null {\n    let filteredSection = super.filter(collection, newCollection, filterFn);\n    if (filteredSection) {\n      if (filteredSection.lastChildKey !== null) {\n        let lastChild = collection.getItem(filteredSection.lastChildKey);\n        if (lastChild && lastChild.type !== 'header') {\n          return filteredSection;\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * An immutable Collection implementation. Updates are only allowed\n * when it is not marked as frozen. This can be subclassed to implement\n * custom collection behaviors.\n */\nexport class BaseCollection<T> implements ICollection<Node<T>> {\n  private keyMap: Map<Key, CollectionNode<T>> = new Map();\n  private firstKey: Key | null = null;\n  private lastKey: Key | null = null;\n  private frozen = false;\n  private itemCount: number = 0;\n  isComplete = true;\n\n  get size(): number {\n    return this.itemCount;\n  }\n\n  getKeys(): IterableIterator<Key> {\n    return this.keyMap.keys();\n  }\n\n  *[Symbol.iterator](): IterableIterator<Node<T>> {\n    let node: Node<T> | undefined = this.firstKey != null ? this.keyMap.get(this.firstKey) : undefined;\n    while (node) {\n      yield node;\n      node = node.nextKey != null ? this.keyMap.get(node.nextKey) : undefined;\n    }\n  }\n\n  getChildren(key: Key): Iterable<Node<T>> {\n    let keyMap = this.keyMap;\n    return {\n      *[Symbol.iterator]() {\n        let parent = keyMap.get(key);\n        let node = parent?.firstChildKey != null ? keyMap.get(parent.firstChildKey) : null;\n        while (node) {\n          yield node as Node<T>;\n          node = node.nextKey != null ? keyMap.get(node.nextKey) : undefined;\n        }\n      }\n    };\n  }\n\n  getKeyBefore(key: Key): Key | null {\n    let node = this.keyMap.get(key);\n    if (!node) {\n      return null;\n    }\n\n    if (node.prevKey != null) {\n      node = this.keyMap.get(node.prevKey);\n\n      while (node && node.type !== 'item' && node.lastChildKey != null) {\n        node = this.keyMap.get(node.lastChildKey);\n      }\n\n      return node?.key ?? null;\n    }\n\n    return node.parentKey;\n  }\n\n  getKeyAfter(key: Key): Key | null {\n    let node = this.keyMap.get(key);\n    if (!node) {\n      return null;\n    }\n\n    if (node.type !== 'item' && node.firstChildKey != null) {\n      return node.firstChildKey;\n    }\n\n    while (node) {\n      if (node.nextKey != null) {\n        return node.nextKey;\n      }\n\n      if (node.parentKey != null) {\n        node = this.keyMap.get(node.parentKey);\n      } else {\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n  getFirstKey(): Key | null {\n    return this.firstKey;\n  }\n\n  getLastKey(): Key | null {\n    let node = this.lastKey != null ? this.keyMap.get(this.lastKey) : null;\n    while (node?.lastChildKey != null) {\n      node = this.keyMap.get(node.lastChildKey);\n    }\n\n    return node?.key ?? null;\n  }\n\n  getItem(key: Key): Node<T> | null {\n    return this.keyMap.get(key) ?? null;\n  }\n\n  at(): Node<T> {\n    throw new Error('Not implemented');\n  }\n\n  clone(): this {\n    // We need to clone using this.constructor so that subclasses have the right prototype.\n    // TypeScript isn't happy about this yet.\n    // https://github.com/microsoft/TypeScript/issues/3841\n    let Constructor: any = this.constructor;\n    let collection: this = new Constructor();\n    collection.keyMap = new Map(this.keyMap);\n    collection.firstKey = this.firstKey;\n    collection.lastKey = this.lastKey;\n    collection.itemCount = this.itemCount;\n    return collection;\n  }\n\n  addNode(node: CollectionNode<T>): void {\n    if (this.frozen) {\n      throw new Error('Cannot add a node to a frozen collection');\n    }\n\n    if (node.type === 'item' && this.keyMap.get(node.key) == null) {\n      this.itemCount++;\n    }\n\n    this.keyMap.set(node.key, node);\n  }\n\n  // Deeply add a node and its children to the collection from another collection, primarily used when filtering a collection\n  addDescendants(node: CollectionNode<T>, oldCollection: BaseCollection<T>): void {\n    this.addNode(node);\n    let children = oldCollection.getChildren(node.key);\n    for (let child of children) {\n      this.addDescendants(child as CollectionNode<T>, oldCollection);\n    }\n  }\n\n  removeNode(key: Key): void {\n    if (this.frozen) {\n      throw new Error('Cannot remove a node to a frozen collection');\n    }\n\n    let node = this.keyMap.get(key);\n    if (node != null && node.type === 'item') {\n      this.itemCount--;\n    }\n\n    this.keyMap.delete(key);\n  }\n\n  commit(firstKey: Key | null, lastKey: Key | null, isSSR = false): void {\n    if (this.frozen) {\n      throw new Error('Cannot commit a frozen collection');\n    }\n\n    this.firstKey = firstKey;\n    this.lastKey = lastKey;\n    this.frozen = !isSSR;\n  }\n\n  filter(filterFn: FilterFn<T>): this {\n    let newCollection = new (this.constructor as any)();\n    let [firstKey, lastKey] = filterChildren(this, newCollection, this.firstKey, filterFn);\n    newCollection?.commit(firstKey, lastKey);\n    return newCollection;\n  }\n}\n\nfunction filterChildren<T>(collection: BaseCollection<T>, newCollection: BaseCollection<T>, firstChildKey: Key | null, filterFn: FilterFn<T>): [Key | null, Key | null] {\n  // loop over the siblings for firstChildKey\n  // create new nodes based on calling node.filter for each child\n  // if it returns null then don't include it, otherwise update its prev/next keys\n  // add them to the newCollection\n  if (firstChildKey == null) {\n    return [null, null];\n  }\n\n  let firstNode: Node<T> | null = null;\n  let lastNode: Node<T> | null = null;\n  let currentNode = collection.getItem(firstChildKey);\n\n  while (currentNode != null) {\n    let newNode: Mutable<CollectionNode<T>> | null = (currentNode as CollectionNode<T>).filter(collection, newCollection, filterFn);\n    if (newNode != null) {\n      newNode.nextKey = null;\n      if (lastNode) {\n        newNode.prevKey = lastNode.key;\n        lastNode.nextKey = newNode.key;\n      }\n\n      if (firstNode == null) {\n        firstNode = newNode;\n      }\n\n      newCollection.addNode(newNode);\n      lastNode = newNode;\n    }\n\n    currentNode = currentNode.nextKey ? collection.getItem(currentNode.nextKey) : null;\n  }\n\n  // TODO: this is pretty specific to dividers but doesn't feel like there is a good way to get around it since we only can know\n  // to filter the last separator in a collection only after performing a filter for the rest of the contents after it\n  // Its gross that it needs to live here, might be nice if somehow we could have this live in the separator code\n  if (lastNode && lastNode.type === 'separator') {\n    let prevKey = lastNode.prevKey;\n    newCollection.removeNode(lastNode.key);\n\n    if (prevKey) {\n      lastNode = newCollection.getItem(prevKey) as Mutable<CollectionNode<T>>;\n      lastNode.nextKey = null;\n    } else {\n      lastNode = null;\n    }\n  }\n\n  return [firstNode?.key ?? null, lastNode?.key ?? null];\n}\n"],"names":[],"version":3,"file":"BaseCollection.module.js.map"}